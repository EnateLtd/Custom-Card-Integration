[
    {
        "Name": "Iframe-card",
        "Description": null,
        "Retired": false,
        "IsSelfServiceCard": false,
        "IsCustomised": true,
        "HtmlFragment": "<div [class.d-none]=\"IsExpanded\">\n    <div class=\"list-group d-flex flex-row flex-wrap\">\n        This shows you how to add an Iframe to your Advanced Custom Cards through which you can surface your own bespoke\n        content.\n    </div>\n</div>\n<div [class.d-none]=\"!IsExpanded\">\n    <div class=\"container-fluid\">\n        <iframe #iframe (load)=\"iframeLoaded($event)\" style=\"width:100%; height:100vh;\"></iframe>\n    </div>\n</div>",
        "Javascript": "\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar $template = (function () { return ['<div [class.d-none]=\"IsExpanded\">     <div class=\"list-group d-flex flex-row flex-wrap\">         This shows you how to add an Iframe to your Advanced Custom Cards through which you can surface your own bespoke         content.     </div> </div> <div [class.d-none]=\"!IsExpanded\">     <div class=\"container-fluid\">         <iframe #iframe (load)=\"iframeLoaded($event)\" style=\"width:100%; height:100vh;\"></iframe>     </div> </div>'].join(''); })();\r\nvar $style = (function () { return [' .table-group {     overflow-x: auto; }  .table-group .form-control {     min-width: 180px !important; }  .table-group table {     width: 100%; }  .table-group table th {     font-weight: normal; }  .table-group table td:not(.ct-delete), .table-group table th:not(.ct-delete) {     vertical-align: top;     padding-right: 15px;     white-space: nowrap; }  .table-group table td.ct-delete, .table-group table th.ct-delete {     text-align: center;     padding-bottom: 15px;     width: 50px;     min-width: 50px; }  .ct-delete i {     cursor: pointer; }  .ct-add {     width: 100%;     text-align: center;     padding: 20px; }  .table-group table td.date-time {     min-width: 350px; } .table-group table td.currency-input {     min-width: 230px; }  .collapsed-text {     max-width: 50%; }']; })();\r\nvar common_1 = require(\"@angular/common\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar forms_1 = require(\"@angular/forms\");\r\nvar http_1 = require(\"@angular/common/http\");\r\nvar _displayPacketObjects_1 = require(\"@displayPacketObjects\");\r\nvar _customCardModule_1 = require(\"@customCardModule\");\r\nvar IframeCardComponent = /** @class */ (function () {\r\n    function IframeCardComponent() {\r\n        this.appUrl = new URL(\"https://enateltd.github.io/Custom-Card-Integration/iframe/index.html#iframe-id=\" + Date.now() + '-' + performance.now());\r\n        this.stopSubmitValidator = null;\r\n        this.messageListener = null;\r\n    }\r\n    Object.defineProperty(IframeCardComponent.prototype, \"Packet\", {\r\n        get: function () {\r\n            return this.Option && this.Option.Packet;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(IframeCardComponent.prototype, \"IsExpanded\", {\r\n        get: function () {\r\n            return (this.Option ? this.Option.Card.Expand === true : false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    IframeCardComponent.prototype.ngOnInit = function () { };\r\n    IframeCardComponent.prototype.ngOnDestroy = function () {\r\n        // remove event listener\r\n        window.removeEventListener('message', this.messageListener, true);\r\n    };\r\n    IframeCardComponent.prototype.iframeLoaded = function (e) {\r\n        var _this = this;\r\n        if (!e.target.src) {\r\n            e.target.src = this.appUrl.href;\r\n            return;\r\n        }\r\n        // send top url so that iframe know about host\r\n        this.sendMessage(\"\", { type: 'topWindowInfo', href: location.href });\r\n        // remove event listener first\r\n        window.removeEventListener('message', this.messageListener, true);\r\n        // add event listener after load\r\n        this.messageListener = function (e) { _this.messageRecieved(e.data); };\r\n        window.addEventListener('message', this.messageListener, true);\r\n    };\r\n    IframeCardComponent.prototype.sendMessage = function (token, data) {\r\n        var win = this.iframe && this.iframe.nativeElement && this.iframe.nativeElement.contentWindow;\r\n        if (win && win.postMessage) {\r\n            win.postMessage({ token: token, data: data }, this.appUrl.origin);\r\n        }\r\n    };\r\n    IframeCardComponent.prototype.messageRecieved = function (e) {\r\n        var _this = this;\r\n        if (e && e.src === this.appUrl.href.toLowerCase()) {\r\n            switch (e.data.type) {\r\n                case \"GetInfo\":\r\n                    {\r\n                        this.sendMessage(e.token, JSON.parse(JSON.stringify(this.Packet.toJson())));\r\n                    }\r\n                    break;\r\n                case \"UpdateTitle\":\r\n                    {\r\n                        this.Packet.Title = e.data.title;\r\n                        this.sendMessage(e.token, {});\r\n                    }\r\n                    break;\r\n                case \"AddValidation\":\r\n                    {\r\n                        if (!this.Option.Card.Validators.includes(this.stopSubmitValidator)) {\r\n                            this.stopSubmitValidator = function (packet, cardOptions) {\r\n                                return _displayPacketObjects_1.WorkItemValidator.ERRORS(null, [\"You cannot submit because external tool is working on atm\"]);\r\n                            };\r\n                            this.Option.Card.Validators.push(this.stopSubmitValidator);\r\n                        }\r\n                        this.sendMessage(e.token, {});\r\n                    }\r\n                    break;\r\n                case \"RemoveValidation\":\r\n                    {\r\n                        this.Option.Card.Validators = this.Option.Card.Validators.filter(function (x) { return x !== _this.stopSubmitValidator; });\r\n                        this.stopSubmitValidator = null;\r\n                        this.sendMessage(e.token, {});\r\n                    }\r\n                    break;\r\n                case \"CallEnateAPI\":\r\n                    {\r\n                        fetch(location.origin + location.pathname + 'WebAPI/UserProfile/GetProfile').then(function (d) { return d.json(); }).then(function (d) {\r\n                            _this.sendMessage(e.token, d);\r\n                        });\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n    var _a, _b, _c, _d;\r\n    __decorate([\r\n        core_1.Input(),\r\n        __metadata(\"design:type\", typeof (_a = typeof _displayPacketObjects_1.ICardOption !== \"undefined\" && _displayPacketObjects_1.ICardOption) === \"function\" ? _a : Object)\r\n    ], IframeCardComponent.prototype, \"Option\", void 0);\r\n    __decorate([\r\n        core_1.Input(),\r\n        __metadata(\"design:type\", typeof (_b = typeof core_1.Injector !== \"undefined\" && core_1.Injector) === \"function\" ? _b : Object)\r\n    ], IframeCardComponent.prototype, \"injector\", void 0);\r\n    __decorate([\r\n        core_1.Input(),\r\n        __metadata(\"design:type\", typeof (_c = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _c : Object)\r\n    ], IframeCardComponent.prototype, \"httpClient\", void 0);\r\n    __decorate([\r\n        core_1.ViewChild('iframe', { static: false }),\r\n        __metadata(\"design:type\", typeof (_d = typeof core_1.ElementRef !== \"undefined\" && core_1.ElementRef) === \"function\" ? _d : Object)\r\n    ], IframeCardComponent.prototype, \"iframe\", void 0);\r\n    IframeCardComponent = __decorate([\r\n        core_1.Component({\r\n            selector: \"iframecard-component\",\r\n            template: $template,\r\n            styles: $style\r\n        })\r\n    ], IframeCardComponent);\r\n    return IframeCardComponent;\r\n}());\r\nexports.IframeCardComponent = IframeCardComponent;\r\nvar IframeCardModule = /** @class */ (function () {\r\n    function IframeCardModule() {\r\n    }\r\n    IframeCardModule = __decorate([\r\n        core_1.NgModule({\r\n            declarations: [IframeCardComponent],\r\n            imports: [common_1.CommonModule, forms_1.FormsModule, forms_1.ReactiveFormsModule, http_1.HttpClientModule, _customCardModule_1.CustomCardModule],\r\n            providers: [http_1.HttpClient,\r\n                {\r\n                    provide: \"widgets\",\r\n                    multi: true,\r\n                    useValue: [{ name: \"IframeCardComponent\", component: IframeCardComponent }]\r\n                }]\r\n        })\r\n    ], IframeCardModule);\r\n    return IframeCardModule;\r\n}());\r\nexports.default = IframeCardModule;\r\n",
        "Typescript": "\nimport { CommonModule } from \"@angular/common\";\nimport { NgModule, Component, Injector, Input, HostListener, ElementRef, ViewChild } from \"@angular/core\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { HttpClientModule, HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { NgbModule } from \"@ng-bootstrap/ng-bootstrap\";\nimport { DataDictionaryDataTypes, CustomCardDisplaySection } from \"@dal\";\nimport { WorkItemValidator, ICardOption, CaseFlowPacketForUI } from \"@displayPacketObjects\";\nimport { CustomCardModule } from \"@customCardModule\";\nimport { DATA_DUMP_EVENT, OnDataDump } from \"@shared/test/data-dumping.service\";\n\n@Component({\n    selector: \"iframecard-component\",\n    template: $template,\n    styles: $style\n})\nexport class IframeCardComponent {\n\n    // ********* SYSTEM PROPERTIES BEGINS *********\n    @Input() Option: ICardOption;\n    @Input() injector: Injector;\n    @Input() httpClient: HttpClient;\n\n    get Packet(): CaseFlowPacketForUI {\n        return this.Option && <any>this.Option.Packet;\n    }\n    get IsExpanded(): boolean {\n        return (this.Option ? this.Option.Card.Expand === true : false);\n    }\n    ngOnInit() { }\n\n    @ViewChild('iframe', { static: false }) iframe: ElementRef;\n    appUrl = new URL(\"https://enateltd.github.io/Custom-Card-Integration/iframe/index.html#iframe-id=\" + Date.now() + '-' + performance.now());\n\n    ngOnDestroy() {\n        // remove event listener\n        window.removeEventListener('message', this.messageListener, true);\n    }\n    iframeLoaded(e) {\n        if (!e.target.src) {\n            e.target.src = this.appUrl.href;\n            return;\n        }\n\n        // send top url so that iframe know about host\n        this.sendMessage(\"\", { type: 'topWindowInfo', href: location.href });\n\n        // remove event listener first\n        window.removeEventListener('message', this.messageListener, true);\n\n        // add event listener after load\n        this.messageListener = (e) => { this.messageRecieved(e.data); }\n        window.addEventListener('message', this.messageListener, true);\n    }\n    sendMessage(token, data) {\n        const win = this.iframe && this.iframe.nativeElement && this.iframe.nativeElement.contentWindow;\n        if (win && win.postMessage) {\n            win.postMessage({ token, data }, this.appUrl.origin);\n        }\n    }\n\n    stopSubmitValidator = null;\n    messageListener = null;\n    messageRecieved(e) {\n        if (e && e.src === this.appUrl.href.toLowerCase()) {\n            switch (e.data.type) {\n                case \"GetInfo\": {\n                    this.sendMessage(e.token, JSON.parse(JSON.stringify(this.Packet.toJson())));\n                } break;\n                case \"UpdateTitle\": {\n                    this.Packet.Title = e.data.title;\n                    this.sendMessage(e.token, {});\n                } break;\n                case \"AddValidation\": {\n                    if (!this.Option.Card.Validators.includes(this.stopSubmitValidator)) {\n                        this.stopSubmitValidator = (packet: CasePacketForUI, cardOptions: ICardOption) => {\n                            return WorkItemValidator.ERRORS(null, [\"You cannot submit because external tool is working on atm\"]);\n                        };\n                        this.Option.Card.Validators.push(this.stopSubmitValidator);\n                    }\n                    this.sendMessage(e.token, {});\n                } break;\n                case \"RemoveValidation\": {\n                    this.Option.Card.Validators = this.Option.Card.Validators.filter(x => x !== this.stopSubmitValidator);\n                    this.stopSubmitValidator = null;\n                    this.sendMessage(e.token, {});\n                } break;\n                case \"CallEnateAPI\": {\n                    fetch(location.origin + location.pathname + 'WebAPI/UserProfile/GetProfile').then(d => d.json()).then(d => {\n                        this.sendMessage(e.token, d);\n                    });\n\n                } break;\n            }\n        }\n    }\n}\n@NgModule({\n    declarations: [IframeCardComponent],\n    imports: [CommonModule, FormsModule, ReactiveFormsModule, HttpClientModule, CustomCardModule],\n    providers: [HttpClient,\n        {\n            provide: \"widgets\",\n            multi: true,\n            useValue: [{ name: \"IframeCardComponent\", component: IframeCardComponent }]\n        }]\n})\nexport default class IframeCardModule { }",
        "Styles": "\n.table-group {\n    overflow-x: auto;\n}\n\n.table-group .form-control {\n    min-width: 180px !important;\n}\n\n.table-group table {\n    width: 100%;\n}\n\n.table-group table th {\n    font-weight: normal;\n}\n\n.table-group table td:not(.ct-delete), .table-group table th:not(.ct-delete) {\n    vertical-align: top;\n    padding-right: 15px;\n    white-space: nowrap;\n}\n\n.table-group table td.ct-delete, .table-group table th.ct-delete {\n    text-align: center;\n    padding-bottom: 15px;\n    width: 50px;\n    min-width: 50px;\n}\n\n.ct-delete i {\n    cursor: pointer;\n}\n\n.ct-add {\n    width: 100%;\n    text-align: center;\n    padding: 20px;\n}\n\n.table-group table td.date-time {\n    min-width: 350px;\n}\n.table-group table td.currency-input {\n    min-width: 230px;\n}\n\n.collapsed-text {\n    max-width: 50%;\n}",
        "Fields": [],
        "GUID": "009f343a-489c-4009-b6e5-147de0a94338"
    }
]